name: Build and Release

on:
  push:
    branches:
      - master
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

env:
  OS_LIST_UBUNTU: '["ubuntu-latest"]'
  OS_LIST_ALL: '["ubuntu-latest", "windows-latest", "macos-latest", "macos-13"]'
  CIBW_BUILD: 'cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*'
  CONDA_PYTHONS: '3.8,3.9,3.10,3.11,3.12,3.13'


  # Configuration for a package with compiled extensions.
  # * A source distribution will be built on ubuntu-latest.
  # * A wheel distribution will be built on each OS in the build matrix, targeting
  #   Python versions specified in CIBW_BUILD.
  # * A conda package will be built on each OS in the build matrix, targeting Python
  #   versions specified in CONDA_PYTHONS.
  PURE_WHEEL: false
  CONDA_NOARCH: false

  # # Configuration for a package with no compiled extensions, but which has
  # # dependencies that differ by platform or Python version.
  # # * A source distribution will be built on ubuntu-latest.
  # # * A pure wheel distribution will be built on ubuntu-latest
  # # * Conda packages will be built on each OS in the build matrix, targeting Python
  # #   versions specified in CONDA_PYTHONS.
  # PURE_WHEEL: true
  # CONDA_NOARCH: false

  # # Configuration for a package with no extensions and the same dependencies on all
  # # platforms and Python versions.
  # # * A source distribution will be built on ubuntu-latest.
  # # * A pure wheel distribution will be built on ubuntu-latest
  # # * A noarch conda package will be built on ubuntu-latest
  # PURE_WHEEL: true
  # CONDA_NOARCH: true

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      BUILD_OS_LIST: ${{ steps.check.outputs.BUILD_OS_LIST }}
    steps:
      - id: check
        run: |
          # Your logic to determine if multi-OS is needed
          
          if [[ "$PURE_WHEEL" == "false" || "$CONDA_NOARCH" == "false" ]]; then
            echo "BUILD_OS_LIST=$OS_LIST_UBUNTU" >> $GITHUB_OUTPUT
          else
            echo "BUILD_OS_LIST=$OS_LIST_ALL" >> $GITHUB_OUTPUT
          fi

  build:
    needs: configure
    strategy:
      matrix:
        os: ${{ fromJSON(needs.configure.outputs.BUILD_OS_LIST) }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Print
        shell: bash
        run: |
          echo "hello from some OS"
          echo PURE_WHEEL is $PURE_WHEEL
          echo CONDA_NOARCH is $CONDA_NOARCH
          
# jobs:
#   configure:
#     name: Configure
#     runs-on: ubuntu-latest
#     outputs:
#       pure: ${{ steps.check.outputs.pure }}
#       noarch: 
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Install Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.x'

#       - name: Install Python tools
#         run: python -m pip install --upgrade pip setuptools wheel build pkginfo

#       - name: Configure
#         run: |
#           python -m build -s .
#           PKGNAME=$(pkginfo --single -f name .)
#           PKGVER=$(pkginfo --single -f version .)
#           echo $PKGNAME
#           echo $PKGVER


  # build:
  #   name: Build
  #   needs: configure
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: ${{ fromJSON(needs.configure.outputs.BUILD_OS_LIST) }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     # - name: Ignore Tags
  #     #   if: github.event.ref_type == 'push' && contains(github.ref, '/tags')
  #     #   run: git tag -d $(git tag --points-at HEAD)

  #     - name: Install Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.x'

  #     - name: Install Python Build Tools
  #       run: python -m pip install --upgrade pip setuptools wheel build cibuildwheel

  #     - name: Source Distribution
  #       if: strategy.job-index == 0
  #       run: python -m build -s .

  #     - name: Wheel Distribution (pure)
  #       if: (env.PURE_WHEEL == 'true' && strategy.job-index == 0)
  #       run: python -m build -w .

  #     - name: Wheel Distribution (impure)
  #       if: env.PURE_WHEEL == 'false'
  #       run: cibuildwheel --output-dir dist

  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dist-${{ matrix.os }}
  #         path: ./dist
  #         if-no-files-found: error

  #     - name: Install Miniforge
  #       uses: conda-incubator/setup-miniconda@v3
  #       with:
  #         miniforge-version: "latest"
  #         auto-update-conda: true
  #         conda-remove-defaults: true
  #         auto-activate-base: true
  #         activate-environment: ""

  #     - name: Configure Conda Build
  #       shell: bash
  #       run: |
  #         if [ $CONDA_NOARCH == true ]; then
  #             CONDA_BUILD_ARGS="--noarch"
  #         else
  #             CONDA_BUILD_ARGS="--pythons=$CONDA_PYTHONS"
  #         fi
  #         if [ ${{ runner.os }} == Windows ]; then
  #             # Short path to minimise odds of hitting Windows max path length
  #             CONDA_BUILD_ARGS+=" --croot ${{ runner.temp }}\cb"
  #         fi
  #         echo "CONDA_BUILD_ARGS=$CONDA_BUILD_ARGS" >> $GITHUB_ENV

  #     - name: Conda package
  #       shell: bash -l {0}
  #       run: |
  #         conda install -c labscript-suite setuptools-conda
  #         setuptools-conda build $CONDA_BUILD_ARGS .

  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: conda_packages-${{ matrix.os }}
  #         path: ./conda_packages
  #         if-no-files-found: error

#   release:
#     name: Release
#     runs-on: ubuntu-latest
#     needs: [configure, build]
#     steps:

#       - name: Download Artifact
#         uses: actions/download-artifact@v4
#         with:
#           pattern: dist*
#           path: ./dist
#           merge-multiple: true

#       - name: Download Artifact
#         uses: actions/download-artifact@v4
#         with:
#           pattern: conda_packages-*
#           path: ./conda_packages
#           merge-multiple: true

#       # - name: Get Version Number
#       #   if: contains(github.ref, '/tags')
#       #   run: |
#       #     VERSION="${GITHUB_REF/refs\/tags\/v/}"
#       #     echo "VERSION=$VERSION" >> $GITHUB_ENV

#       # - name: Create GitHub Release and Upload Release Asset
#       #   if: contains(github.ref, '/tags')
#       #   uses: softprops/action-gh-release@v2
#       #   env:
#       #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       #   with:
#       #     tag_name: ${{ github.event.ref }}
#       #     name: ${{ env.PACKAGE_NAME }} ${{ env.VERSION }}
#       #     draft: true
#       #     prerelease: ${{ contains(github.event.ref, 'rc') }}
#       #     files: ./dist/${{ env.PACKAGE_NAME }}-${{ env.VERSION }}.tar.gz

#       - name: Publish on TestPyPI
#         # if: secrets.testpypi != ''
#         uses: pypa/gh-action-pypi-publish@release/v1
#         with:
#           user: __token__
#           password: ${{ secrets.testpypi }}
#           repository-url: https://test.pypi.org/legacy/

#       - name: Publish on PyPI
#         if: contains(github.ref, '/tags') 
#         # if: (contains(github.ref, '/tags') && secrets.testpypi != '')
#         uses: pypa/gh-action-pypi-publish@release/v1
#         with:
#           user: __token__
#           password: ${{ secrets.pypi }}

#       - name: Install Miniforge
#         uses: conda-incubator/setup-miniconda@v3
#         with:
#           miniforge-version: "latest"
#           auto-update-conda: true
#           conda-remove-defaults: true
#           auto-activate-base: true
#           activate-environment: ""

#       - name: Install Anaconda cloud client
#         shell: bash -l {0}
#         run: conda install anaconda-client

#       - name: Publish to Anaconda test label
#         if: "!contains(github.ref, '/tags')"
#         # if: "(!contains(github.ref, '/tags') && secrets.ANACONDA_API_TOKEN != '')"
#         shell: bash -l {0}
#         run: |
#           anaconda \
#             --token ${{ secrets.ANACONDA_API_TOKEN }} \
#             upload \
#             --skip-existing \
#             --user $ANACONDA_USER \
#             --label test \
#             conda_packages/*/*

#       - name: Publish to Anaconda main label
#         if: contains(github.ref, '/tags')
#         # if: (contains(github.ref, '/tags') && secrets.ANACONDA_API_TOKEN != '')
#         shell: bash -l {0}
#         run: |
#           anaconda \
#             --token ${{ secrets.ANACONDA_API_TOKEN }} \
#             upload \
#             --skip-existing \
#             --user $ANACONDA_USER \
#             conda_packages/*/*
