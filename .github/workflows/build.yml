name: Build and Release

on:
  push:
    branches:
      - master

env:
  # Configuration for a package with compiled extensions:
  PURE: false
  NOARCH: false

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { os: ubuntu-latest,   python: '3.13',  arch: x64,    conda: true }
          - { os: ubuntu-latest,   python: '3.12',  arch: x64,    conda: true }
          - { os: ubuntu-latest,   python: '3.11',  arch: x64,    conda: true }
          - { os: ubuntu-latest,   python: '3.10',  arch: x64,    conda: true }
          - { os: ubuntu-latest,   python: '3.9',   arch: x64,    conda: true }
          - { os: ubuntu-latest,   python: '3.8',   arch: x64,    conda: true }

          - { os: macos-13,        python: '3.13',  arch: x64,    conda: true }
          - { os: macos-13,        python: '3.12',  arch: x64,    conda: true }
          - { os: macos-13,        python: '3.11',  arch: x64,    conda: true }
          - { os: macos-13,        python: '3.10',  arch: x64,    conda: true }
          - { os: macos-13,        python: '3.9',   arch: x64,    conda: true }
          - { os: macos-13,        python: '3.8',   arch: x64,    conda: true }

          - { os: macos-latest,    python: '3.13',  arch: arm64,  conda: true }
          - { os: macos-latest,    python: '3.12',  arch: arm64,  conda: true }
          - { os: macos-latest,    python: '3.11',  arch: arm64,  conda: true }
          - { os: macos-latest,    python: '3.10',  arch: arm64,  conda: true }
          - { os: macos-latest,    python: '3.9',   arch: arm64,  conda: true }
          - { os: macos-latest,    python: '3.8',   arch: arm64,  conda: true }

          - { os: windows-latest,  python: '3.13',  arch: x64,    conda: true }
          - { os: windows-latest,  python: '3.12',  arch: x64,    conda: true }
          - { os: windows-latest,  python: '3.11',  arch: x64,    conda: true }
          - { os: windows-latest,  python: '3.10',  arch: x64,    conda: true }
          - { os: windows-latest,  python: '3.9',   arch: x64,    conda: true }
          - { os: windows-latest,  python: '3.8',   arch: x64,    conda: true }

          - { os: windows-latest,  python: '3.13',  arch: x86,    conda: false }
          - { os: windows-latest,  python: '3.12',  arch: x86,    conda: false }
          - { os: windows-latest,  python: '3.11',  arch: x86,    conda: false }
          - { os: windows-latest,  python: '3.10',  arch: x86,    conda: false }
          - { os: windows-latest,  python: '3.9',   arch: x86,    conda: false }
          - { os: windows-latest,  python: '3.8',   arch: x86,    conda: false }

    if: github.repository == 'chrisjbillington/desktop-app'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ignore Tags
        if: github.event.ref_type == 'push' && contains(github.ref, '/tags')
        run: git tag -d $(git tag --points-at HEAD)

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          architecture: ${{ matrix.arch }}

      - name: Source Distribution
        if: strategy.job-index == 0
        run: |
          python -m pip install --upgrade pip setuptools wheel build
          python -m build -s .

      - name: Wheel Distribution
        # Impure Linux wheels are built in the manylinux job.
        if: (env.PURE == 'true' && strategy.job-index == 0) || (env.PURE == 'false' && runner.os != 'Linux')
        run: |
          python -m pip install --upgrade pip setuptools wheel build
          python -m build -w .

      - name: Upload Artifact
        if: strategy.job-index == 0 || (env.PURE == 'false' && runner.os != 'Linux')
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-py${{ matrix.python }}-${{ matrix.arch }}
          path: ./dist

      - name: Configure conda build
        if: matrix.conda
        shell: bash
        run: |
          CONDA_BUILD_ARGS="--pythons=${{ matrix.python }}"
          if [ $NOARCH == true ]; then
              CONDA_BUILD_ARGS+=" --noarch"
          fi
          if [ ${{ runner.os }} == Windows ]; then
              # Short path to minimise odds of hitting Windows max path length
              CONDA_BUILD_ARGS+=" --croot ${{ runner.temp }}\cb"
          fi
          # Use version of visual studio available on the GitHub Actions runner:
          IMPURE_CONDA_BUILD_CONFIG=$(cat << EOF
          c_compiler:   # [win]
            - vs2022    # [win]
          cxx_compiler: # [win]
            - vs2022    # [win]
          EOF
          )
          if [ $PURE == false ]; then
              echo "$IMPURE_CONDA_BUILD_CONFIG" > ~/conda_build_config.yaml
          fi
          echo "CONDA_BUILD_ARGS=$CONDA_BUILD_ARGS" >> $GITHUB_ENV

      - name: Install Miniconda
        if: matrix.conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          architecture: ${{ matrix.arch }}
          miniforge-version: "latest"
          auto-update-conda: true
          conda-remove-defaults: true
          auto-activate-base: true
          activate-environment: ""

      - name: Conda package (Unix)
        if: (matrix.conda && runner.os != 'Windows')
        shell: bash -l {0}
        run: |
          conda install -c labscript-suite setuptools-conda
          setuptools-conda build $CONDA_BUILD_ARGS .

      - name: Conda Package (Windows)
        if: (matrix.conda && runner.os == 'Windows')
        shell: cmd /C CALL {0}
        run: |
          conda install -c labscript-suite setuptools-conda && ^
          setuptools-conda build %CONDA_BUILD_ARGS% .

      - name: Upload Artifact
        if: matrix.conda
        uses: actions/upload-artifact@v4
        with:
          name: conda_packages-${{ matrix.os }}-py${{ matrix.python }}-${{ matrix.arch }}
          path: ./conda_packages

  manylinux:
    name: Build Manylinux
    runs-on: ubuntu-latest
    if: github.repository == 'chrisjbillington/conda-build-test'
    steps:
      - name: Checkout
        if: env.PURE == 'false'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ignore Tags
        if: contains(github.ref, '/tags') && env.PURE == 'false'
        run: git tag -d $(git tag --points-at HEAD)

      - name: Build Manylinux Wheels
        if: env.PURE == 'false'
        uses: RalfG/python-wheels-manylinux-build@v0.7.1
        with:
          python-versions: 'cp38-cp38 cp39-cp39 cp310-cp310 cp311-cp311 cp312-cp312 cp313-cp313'
          pre-build-command: 'git config --global --add safe.directory "*"'

      - name: Upload Artifact
        if: env.PURE == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: dist-manylinux
          path: dist/*manylinux*.whl
